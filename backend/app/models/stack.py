from typing import TYPE_CHECKING, Any

from pydantic import Json
from sqlalchemy.dialects.postgresql import JSONB
from sqlmodel import Field, Identity, Relationship, SQLModel

from .room import Room

if TYPE_CHECKING:
    from .item import Item


class StackBase(SQLModel):
    """Shared properties"""

    title: str = Field(min_length=1, max_length=255)
    room_id: int | None = None
    annotations: Json[Any] | None = Field(None, sa_type=JSONB)


class StackCreate(StackBase):
    """Properties to receive on stack creation"""

    pass


class StackUpdate(StackBase):
    """Properties to receive on stack update"""

    # We are ignoring the typing issues because we need the fields to be optional on update
    title: str | None = Field(None, max_length=255)  # type: ignore


class Stack(StackBase, table=True):
    """Database model, database table inferred from class name"""

    id: int | None = Field(default=None, primary_key=True, sa_column_args=[Identity(always=True)])
    """id will be generated by the database"""

    room_id: int | None = Field(default=None, foreign_key="room.id", ondelete="SET NULL")
    room: Room | None = Relationship(back_populates="stacks")

    items: list["Item"] = Relationship(back_populates="stack", cascade_delete=False)


class StackPublic(StackBase):
    """Properties to return via API, id is always required"""

    id: int


class StacksPublic(SQLModel):
    data: list[StackPublic]
    count: int
