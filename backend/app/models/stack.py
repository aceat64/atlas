from datetime import datetime
from typing import TYPE_CHECKING, Any

from pydantic import computed_field
from sqlalchemy.dialects.postgresql import JSONB
from sqlmodel import Field, Identity, Relationship, SQLModel

from .room import Room

if TYPE_CHECKING:
    from .item import Item


class StackBase(SQLModel):
    """Shared properties"""

    title: str = Field(min_length=1, max_length=255)
    room_id: int | None = Field(default=None, foreign_key="room.id", ondelete="SET NULL")
    annotations: dict[str, Any] = Field({}, nullable=False, sa_type=JSONB)


class StackCreate(StackBase):
    """Properties to receive on stack creation"""

    pass


class StackUpdate(StackBase):
    """Properties to receive on stack update"""

    title: str | None = None  # type: ignore
    annotations: dict[str, Any] | None = None  # type: ignore


class Stack(StackBase, table=True):
    """Database model, database table inferred from class name"""

    id: int | None = Field(default=None, primary_key=True, sa_column_args=[Identity(always=True)])
    """id will be generated by the database"""
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)

    room: Room | None = Relationship(back_populates="stacks")
    items: list["Item"] = Relationship(back_populates="stack", cascade_delete=False)

    @computed_field
    def item_count(self) -> int:
        """Total number of items in this stack"""
        return len(self.items)


class StackPublic(StackBase):
    """Properties to return via API, id is always required"""

    id: int
    created_at: datetime
    updated_at: datetime
