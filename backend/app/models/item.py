from enum import Enum
from typing import TYPE_CHECKING, Any

from pydantic import Json
from sqlalchemy.dialects.postgresql import JSONB
from sqlmodel import Field, Identity, Relationship, SQLModel

from .collection import Collection
from .stack import Stack
from .tag import ItemTagLink

if TYPE_CHECKING:
    from .attachment import Attachment
    from .tag import Tag


class ItemType(str, Enum):
    book = "book"
    magazine = "magazine"
    illustration = "illustration"
    movie = "movie"
    tv_show = "tv_show"
    map = "map"


class ItemBase(SQLModel):
    """Shared properties"""

    title: str = Field(min_length=1, max_length=255)
    item_type: ItemType
    collection_id: int | None = None
    stack_id: int | None = None
    shelf: int | None = None
    slot: int | None = None
    annotations: Json[Any] | None = Field(None, sa_type=JSONB)


class ItemCreate(ItemBase):
    """Properties to receive on item creation"""

    pass


class ItemUpdate(ItemBase):
    """Properties to receive on item update"""

    # We are ignoring the typing issues because we need the fields to be optional on update
    title: str | None = Field(default=None, min_length=1, max_length=255)  # type: ignore
    item_type: ItemType | None = None  # type: ignore


class Item(ItemBase, table=True):
    """Database model, database table inferred from class name"""

    id: int | None = Field(default=None, primary_key=True, sa_column_args=[Identity(always=True)])
    """id will be generated by the database"""

    collection_id: int | None = Field(
        default=None, foreign_key="collection.id", ondelete="SET NULL"
    )
    collection: Collection | None = Relationship(back_populates="items")

    stack_id: int | None = Field(default=None, foreign_key="stack.id", ondelete="SET NULL")
    stack: Stack | None = Relationship(back_populates="items")

    tags: list["Tag"] = Relationship(back_populates="items", link_model=ItemTagLink)
    attachments: list["Attachment"] = Relationship(back_populates="item")


class ItemPublic(ItemBase):
    """Properties to return via API, id is always required"""

    id: int


class ItemsPublic(SQLModel):
    data: list[ItemPublic]
    count: int
