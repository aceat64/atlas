from enum import Enum
from typing import Any

from sqlalchemy.dialects.postgresql import JSONB
from sqlmodel import Field, Identity, Relationship, SQLModel

from .attachment import Attachment
from .collection import Collection
from .stack import Stack
from .tag import ItemTagLink, Tag, TagPublic


class ItemType(str, Enum):
    book = "book"
    magazine = "magazine"
    illustration = "illustration"
    movie = "movie"
    tv_show = "tv_show"
    map = "map"


class ItemBase(SQLModel):
    """Shared properties"""

    title: str = Field(min_length=1, max_length=255)
    item_type: ItemType
    collection_id: int | None = Field(
        default=None, foreign_key="collection.id", ondelete="SET NULL"
    )
    stack_id: int | None = Field(default=None, foreign_key="stack.id", ondelete="SET NULL")
    shelf: int | None = None
    slot: int | None = None
    annotations: dict[str, Any] = Field({}, nullable=False, sa_type=JSONB)


class ItemCreate(ItemBase):
    """Properties to receive on item creation"""

    pass


class ItemUpdate(ItemBase):
    """Properties to receive on item update"""

    title: str | None = None  # type: ignore
    item_type: ItemType | None = None  # type: ignore
    annotations: dict[str, Any] | None = None  # type: ignore


class Item(ItemBase, table=True):
    """Database model, database table inferred from class name"""

    id: int | None = Field(default=None, primary_key=True, sa_column_args=[Identity(always=True)])
    """id will be generated by the database"""

    collection: Collection | None = Relationship(back_populates="items")
    stack: Stack | None = Relationship(back_populates="items")
    tags: list[Tag] = Relationship(back_populates="items", link_model=ItemTagLink)
    attachments: list[Attachment] = Relationship(back_populates="item")


class ItemPublic(ItemBase):
    id: int


class ItemsPublic(SQLModel):
    data: list[ItemPublic]
    count: int


class ItemDetail(ItemPublic):
    collection: Collection | None = None
    stack: Stack | None = None
    tags: list[TagPublic] = []
    attachments: list[Attachment] = []
