from datetime import datetime
from enum import Enum
from typing import Any

from sqlalchemy.dialects.postgresql import JSONB
from sqlmodel import Column, DateTime, Field, Identity, Relationship, SQLModel, func

from .attachment import Attachment, AttachmentPublic
from .collection import Collection, CollectionPublic
from .stack import Stack, StackPublic
from .tag import ItemTagLink, Tag, TagPublic


class ItemType(str, Enum):
    book = "book"
    magazine = "magazine"
    illustration = "illustration"
    movie = "movie"
    tv_show = "tv_show"
    map = "map"


class ItemBase(SQLModel):
    """Shared properties"""

    title: str = Field(min_length=1, max_length=255)
    item_type: ItemType
    collection_id: int | None = Field(default=None, foreign_key="collection.id", ondelete="SET NULL")
    stack_id: int | None = Field(default=None, foreign_key="stack.id", ondelete="SET NULL")
    shelf: int | None = None
    slot: int | None = None
    annotations: dict[str, Any] = Field({}, nullable=False, sa_type=JSONB)


class ItemCreate(ItemBase):
    """Properties to receive on item creation"""

    pass


class ItemUpdate(ItemBase):
    """Properties to receive on item update"""

    title: str | None = None  # type: ignore
    item_type: ItemType | None = None  # type: ignore
    annotations: dict[str, Any] | None = None  # type: ignore


class Item(ItemBase, table=True):
    """Database model, database table inferred from class name"""

    id: int | None = Field(default=None, primary_key=True, sa_column_args=[Identity(always=True)])
    """id will be generated by the database"""
    created_at: datetime | None = Field(
        default=None,
        sa_column=Column(DateTime(timezone=True), server_default=func.now(), nullable=False),
    )
    updated_at: datetime | None = Field(
        default=None,
        sa_column=Column(DateTime(timezone=True), onupdate=func.now()),
    )

    collection: Collection | None = Relationship(
        back_populates="items",
        sa_relationship_kwargs={"lazy": "selectin"},
    )
    stack: Stack | None = Relationship(
        back_populates="items",
        sa_relationship_kwargs={"lazy": "selectin"},
    )
    tags: list[Tag] = Relationship(
        back_populates="items",
        link_model=ItemTagLink,
        sa_relationship_kwargs={"lazy": "selectin"},
    )
    attachments: list[Attachment] = Relationship(
        back_populates="item",
        sa_relationship_kwargs={"lazy": "selectin"},
        cascade_delete=True,
    )


class ItemPublic(ItemBase):
    id: int
    created_at: datetime
    updated_at: datetime | None
    collection: CollectionPublic | None = None
    stack: StackPublic | None = None
    tags: list[TagPublic] = []
    attachments: list[AttachmentPublic] = []
