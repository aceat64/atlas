from typing import TYPE_CHECKING, Any

from pydantic import Json
from sqlalchemy.dialects.postgresql import JSONB
from sqlmodel import Field, Identity, Relationship, SQLModel

if TYPE_CHECKING:
    from .item import Item


class CollectionBase(SQLModel):
    """Shared properties"""

    title: str = Field(min_length=1, max_length=255)
    annotations: Json[Any] | None = Field(None, sa_type=JSONB)


class CollectionCreate(CollectionBase):
    """Properties to receive on collection creation"""

    pass


class CollectionUpdate(CollectionBase):
    """Properties to receive on collection update"""

    # We are ignoring the typing issues because we need the fields to be optional on update
    title: str | None = Field(None, max_length=255)  # type: ignore


class Collection(CollectionBase, table=True):
    """Database model, database table inferred from class name"""

    id: int | None = Field(default=None, primary_key=True, sa_column_args=[Identity(always=True)])
    """id will be generated by the database"""
    items: list["Item"] = Relationship(back_populates="collection", cascade_delete=False)


class CollectionPublic(CollectionBase):
    """Properties to return via API, id is always required"""

    id: int


class CollectionsPublic(SQLModel):
    data: list[CollectionPublic]
    count: int
