from datetime import datetime
from typing import TYPE_CHECKING, Any

from sqlalchemy.dialects.postgresql import JSONB
from sqlmodel import Field, Identity, Relationship, SQLModel

if TYPE_CHECKING:
    from .item import Item


class CollectionBase(SQLModel):
    """Shared properties"""

    title: str = Field(min_length=1, max_length=255)
    annotations: dict[str, Any] = Field(default={}, nullable=False, sa_type=JSONB)


class CollectionCreate(CollectionBase):
    """Properties to receive on collection creation"""

    pass


class CollectionUpdate(CollectionBase):
    """Properties to receive on collection update"""

    title: str | None = None  # type: ignore
    annotations: dict[str, Any] | None = None  # type: ignore


class Collection(CollectionBase, table=True):
    """Database model, database table inferred from class name"""

    id: int | None = Field(default=None, primary_key=True, sa_column_args=[Identity(always=True)])
    """id will be generated by the database"""
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)

    items: list["Item"] = Relationship(
        back_populates="collection",
        cascade_delete=False,
        sa_relationship_kwargs={"lazy": "selectin"},
    )


class CollectionPublic(CollectionBase):
    """Properties to return via API, id is always required"""

    id: int
    created_at: datetime
    updated_at: datetime
