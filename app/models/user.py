from datetime import datetime
from typing import TYPE_CHECKING

from pydantic import EmailStr, computed_field
from sqlmodel import Column, DateTime, Field, Identity, Relationship, SQLModel, func

if TYPE_CHECKING:
    from .session import Session


class UserBase(SQLModel):
    """Shared properties"""

    email: EmailStr = Field(max_length=255)
    name: str = Field(max_length=255)
    username: str = Field(max_length=255)


class UserCreate(UserBase):
    """Properties to receive on user creation"""

    pass


class UserUpdate(UserBase):
    """Properties to receive on user update"""

    pass


class User(UserBase, table=True):
    """Database model, database table inferred from class name"""

    id: int | None = Field(default=None, primary_key=True, sa_column_args=[Identity(always=True)])
    """id will be generated by the database"""
    created_at: datetime | None = Field(
        default=None,
        sa_column=Column(DateTime(timezone=True), server_default=func.now(), nullable=False),
    )
    updated_at: datetime | None = Field(
        default=None,
        sa_column=Column(DateTime(timezone=True), onupdate=func.now()),
    )

    sessions: list["Session"] = Relationship(
        back_populates="user",
        cascade_delete=False,
        sa_relationship_kwargs={"lazy": "selectin"},
    )

    @computed_field
    def session_count(self) -> int:
        """Total number of sessions belonging to the user"""
        return len(self.sessions)


class UserPublic(UserBase):
    """Properties to return via API, id is always required"""

    id: int
    created_at: datetime
    updated_at: datetime | None
